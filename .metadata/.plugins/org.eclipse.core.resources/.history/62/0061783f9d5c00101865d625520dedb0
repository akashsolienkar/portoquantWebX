package com.quant.portoquant.infrastructure.reports.generator;

import com.quant.portoquant.infrastructure.reports.models.charts.PieChart;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PiePlot;
import org.jfree.data.general.DefaultPieDataset;
import org.springframework.stereotype.Component;

import javax.imageio.ImageIO;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.ByteArrayOutputStream;
import java.util.Base64;
import java.util.Map;
import java.util.Random;

@Component
public class ChartRenderer {

    /**
     * Generates a Base64-encoded PNG image of a pie chart using any PieChart implementation.
     *
     * @param dataProvider an implementation of PieChart that provides label-value pairs
     * @param title the title of the chart
     * @return a Base64-encoded PNG string of the generated chart
     * @param <T> the data type used by the charting logic
     */
    public <T> String generatePieChartBase64(PieChart dataProvider, String title) {
        Map<String, Number> data = dataProvider.getPlottingPoints();

        if (data == null || data.isEmpty()) {
            throw new IllegalArgumentException("No chart data provided.");
        }

        DefaultPieDataset dataset = new DefaultPieDataset();
        data.forEach(dataset::setValue);

        JFreeChart chart = ChartFactory.createPieChart(title, dataset, true, true, false);
        PiePlot plot = (PiePlot) chart.getPlot();
        plot.setBackgroundPaint(Color.WHITE);
        plot.setOutlineVisible(false);

        Random random = new Random();
        for (Comparable key : dataset.getKeys()) {
            plot.setSectionPaint(key, generateDistinctColor(random));
        }

        BufferedImage image = chart.createBufferedImage(500, 400);
        try (ByteArrayOutputStream baos = new ByteArrayOutputStream()) {
            ImageIO.write(image, "png", baos);
            return Base64.getEncoder().encodeToString(baos.toByteArray());
        } catch (Exception e) {
            throw new RuntimeException("Failed to render chart", e);
        }
    }

    private Color generateDistinctColor(Random random) {
        float hue = random.nextFloat(); // Random hue
        float saturation = 0.5f + random.nextFloat() * 0.5f; // 50–100% saturation
        float brightness = 0.7f + random.nextFloat() * 0.3f; // 70–100% brightness
        return Color.getHSBColor(hue, saturation, brightness);
    }
}

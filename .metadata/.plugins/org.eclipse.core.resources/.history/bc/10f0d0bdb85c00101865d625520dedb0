package com.quant.portoquant.application.service.impl;



import com.quant.portoquant.api.dto.SimulationResponse;
import com.quant.portoquant.api.mapper.SimulationMapper;
import com.quant.portoquant.application.service.SimulationService;
import com.quant.portoquant.domain.model.Portfolio;
import com.quant.portoquant.domain.model.SimulationResult;
import com.quant.portoquant.domain.simulation.executors.MonteCarloSimulationExecutor;
import com.quant.portoquant.infrastructure.exception.ResourceNotFoundException;
import com.quant.portoquant.infrastructure.repository.PortfolioRepository;
import com.quant.portoquant.infrastructure.repository.SimulationResultRepository;

import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.util.List;
import java.util.UUID;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
public class SimulationServiceImpl implements SimulationService{

    private final PortfolioRepository portfolioRepository;
    private final SimulationResultRepository simulationResultRepository;
    private final MonteCarloSimulationExecutor executor;

    @Override
    public SimulationResponse runSimulation(UUID portofolioId, int numOfSimulations) {
        UUID portfolioId = portofolioId;
        Portfolio portfolio = portfolioRepository.findById(portfolioId)
                .orElseThrow(() -> new ResourceNotFoundException("Portfolio not found"));

        SimulationResult result = new SimulationResult();
        result.setPortfolio(portfolio);
        result.setNumSimulations(numOfSimulations);
        result.setCreatedAt(LocalDateTime.now());

        try {
        	System.out.println("protfolaaaaaa1");
            // Perform simulation (this will update risk metrics internally)
           SimulationResult s= executor.runSimulations(portfolio,numOfSimulations);

            System.out.println("protfolaaaaaa");
            // Dummy values or set them inside executor if your executor returns updated result
            result.setFinalPortfolioValue(s.getFinalPortfolioValue()); // Or from simulation outcome
            result.setValueAtRisk(s.getValueAtRisk());           // Example placeholder
            result.setExpectedShortfall(s.getExpectedShortfall());     // Example placeholder
            result.setVolatilityPercent(s.getVolatilityPercent());       // Example placeholder
            result.setBankruptcyProbability(s.getBankruptcyProbability());   // Example placeholder
            result.setMeanReturn(s.getMeanReturn());              // Example placeholder
            System.out.println("protfolaaaaaa2");
            result.setSuccessful(true);
        } catch (Exception e) {
            result.setSuccessful(false);
            throw new RuntimeException("Simulation failed", e);
        }

        result.setCompletedAt(LocalDateTime.now());
        SimulationResult saved = simulationResultRepository.save(result);
        return SimulationMapper.toResponse(saved);
    }

    @Override
    public SimulationResponse getSimulationById(Long simulationId) {
        SimulationResult result = simulationResultRepository.findById(simulationId)
                .orElseThrow(() -> new ResourceNotFoundException("Simulation not found"));
        return SimulationMapper.toResponse(result);
    }

    @Override
    public List<SimulationResponse> getSimulationsForPortfolio(UUID portfolioId) {
        List<SimulationResult> results = simulationResultRepository.findByPortfolioId(portfolioId);
        return results.stream()
                .map(SimulationMapper::toResponse)
                .collect(Collectors.toList());
    }
}
